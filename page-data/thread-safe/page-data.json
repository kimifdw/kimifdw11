{"componentChunkName":"component---src-templates-blog-post-js","path":"/thread-safe/","result":{"data":{"site":{"siteMetadata":{"title":"F&Y-BLOG","author":"kimifdw"}},"markdownRemark":{"id":"6e6bbee9-21ba-5593-b86a-47b94b006bdb","html":"<p>首先使代码正确运行，然后再提高代码速度。【正确编写并发程序的方法】</p>\n<h2 id=\"知识点\"><a href=\"#%E7%9F%A5%E8%AF%86%E7%82%B9\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>知识点</h2>\n<ol>\n<li>竞态条件。\n当某个计算的正确性取决于多个线程的交替执行时序。最常见的竞态条件类型</li>\n<li>先检查后执行（Check-Then-Act）</li>\n<li>对象的状态。\n存储在状态变量（例如实例或静态域）中的数据。</li>\n<li>共享。\n变量可以由多个线程同时访问；</li>\n<li>可变。\n变量的值在其生命周期内可以发生变化；</li>\n<li>线程安全性。\n当多个线程访问某个类时，不管运行时环境采用何种调度方式或者这些线程将如何交替执行，并且在主调代码不需要任何交替执行，并且在主调代码中不需要任何额外的同步或协同，这个类都能表现出正确的行为。无状态对象一定是线程安全的</li>\n</ol>\n<hr>\n<h2 id=\"怎么做到线程安全\"><a href=\"#%E6%80%8E%E4%B9%88%E5%81%9A%E5%88%B0%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>怎么做到线程安全</h2>\n<ul>\n<li><code class=\"language-text\">synchronized</code>\n在多个线程访问某个状态变量并且其中有一个线程执行写入时，<strong>协同</strong>这些线程对变量的访问。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> value<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"避免竞态条件\"><a href=\"#%E9%81%BF%E5%85%8D%E7%AB%9E%E6%80%81%E6%9D%A1%E4%BB%B6\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>避免竞态条件</h3>\n<p>在某个线程修改变量时，以原子方式执行。</p>\n<ol>\n<li>使用现有的线程安全类。例如 AtomicLong、AtomicInteger 等在 java.util.concurrent.atomic 包中的原子类。</li>\n<li>对于每个包含多个变量的不变性条件，其中涉及的所有变量都需要由同一个锁来保护。</li>\n<li>加锁【<strong>互斥锁</strong>】机制（java 内置的锁机制【同步代码块】）.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token comment\">// 访问或修改由锁保护的共享状态}</span></code></pre></div>\n<p>每个 java 对象都可以用做一个实现同步的锁（可重入）。</p>\n<h3 id=\"加锁约定\"><a href=\"#%E5%8A%A0%E9%94%81%E7%BA%A6%E5%AE%9A\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>加锁约定</h3>\n<ol>\n<li>将所有的可变状态都封装在对象内部，并通过对象的内置锁对所有访问可变状态的代码路径进行同步。</li>\n<li>当执行时间较长的计算或者可能无法快速完成的操作时，<strong>一定不要持有锁</strong>。</li>\n<li>尽量将</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span></code></pre></div>\n<p>控制在合理的大小。</p>","timeToRead":2,"frontmatter":{"title":"线程安全性","date":"October 21, 2020","spoiler":"thread safe."},"fields":{"slug":"/thread-safe/"}}},"pageContext":{"slug":"/thread-safe/","previous":{"fields":{"slug":"/DDD/","directoryName":"DDD"},"frontmatter":{"title":"DDD随想"}},"next":{"fields":{"slug":"/learn-angular/","directoryName":"learn-angular"},"frontmatter":{"title":"angular2学习"}}}},"staticQueryHashes":["336482444"]}