{"componentChunkName":"component---src-templates-blog-post-js","path":"/learn-angular/","result":{"data":{"site":{"siteMetadata":{"title":"F&Y-BLOG","author":"kimifdw"}},"markdownRemark":{"id":"5c441984-6919-510a-aacf-b8a40dedd491","html":"<h2 id=\"quickstart-demo\"><a href=\"#quickstart-demo\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>quickStart Demo</h2>\n<h3 id=\"part1-and-part2\"><a href=\"#part1-and-part2\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>part1 and part2</h3>\n<ol>\n<li>angular 系统库自带<code class=\"language-text\">@angular</code>开头,最主要的库<code class=\"language-text\">@angular\\core</code>;<br>\n其他相对重要的库:<code class=\"language-text\">@angular/common,@angular/router,@angular/http</code>;</li>\n<li>\n<p><strong>import</strong>注意点:</p>\n<ul>\n<li>引入系统自带库,只需要直接写 module 名称。<br><code class=\"language-text\">import { Component } from &#39;@angular/core&#39;;</code></li>\n<li>引入自己的文件,需要带路径。<br><code class=\"language-text\">import { AppComponent } from &#39;./app.component&#39;;</code></li>\n<li>引入路径时,<code class=\"language-text\">./</code>表示引入的 module 与当前的文件在<strong>同一目录</strong>下。</li>\n</ul>\n</li>\n<li>\n<p>常用的标签:<code class=\"language-text\">@Injectable[类似于JAVA中的@Autowired], @Input, @Output, @RouterConfig,@Component</code></p>\n<ul>\n<li>绑定标签</li>\n<li>property[]</li>\n<li>\n<p>标签</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> Element property\n Component property\n Directive property</code></pre></div>\n</li>\n<li>\n<p>DEMO</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> &lt;img [src] = &quot;heroImageUrl&quot;&gt;\n &lt;hero-detail [hero]=&quot;currentHero&quot;&gt;&lt;/hero-detail&gt;\n &lt;div [ngClass] = &quot;{selected: isSelected}&quot;&gt;&lt;/div&gt;</code></pre></div>\n</li>\n<li>\n<p>event()</p>\n<ol>\n<li>\n<p>标签</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Element property\nComponent property\nDirective property</code></pre></div>\n</li>\n<li>\n<p>DEMO</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;button (click) = &quot;onSave()&quot;&gt;Save&lt;/button&gt;\n&lt;hero-detail (deleteRequest)=&quot;deleteHero()&quot;&gt;&lt;/hero-detail&gt;\n&lt;div (myClick)=&quot;clicked=$event&quot;&gt;click me&lt;/div&gt;</code></pre></div>\n</li>\n</ol>\n</li>\n<li>\n<p>双向绑定[()]</p>\n<ol>\n<li>标签\n<code class=\"language-text\">Event and property</code></li>\n<li>\n<p>DEMO</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;input [(ngModel)]=&quot;heroName&quot;&gt;</code></pre></div>\n</li>\n</ol>\n</li>\n<li>\n<p>Attribute[]</p>\n<ol>\n<li>标签\n<code class=\"language-text\">Attributes(the exception)</code></li>\n<li>语法:<code class=\"language-text\">attr.</code></li>\n<li>\n<p>DEMO</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;button [attr.aria-label]=&quot;help&quot;&gt;help&lt;/button&gt;</code></pre></div>\n</li>\n</ol>\n</li>\n<li>\n<p>Class[]</p>\n<ol>\n<li>标签\n<code class=\"language-text\">class property</code></li>\n<li>语法:<code class=\"language-text\">[class]=value</code>【替换所有的 class 值】;<code class=\"language-text\">class.</code>:替换局部 class 名称</li>\n<li>\n<p>DEMO</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div [class.special]=&quot;isSpecial&quot;&gt;Special&lt;/div&gt;</code></pre></div>\n</li>\n<li>\n<p>NgClass 代替</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">setClasses() {\n let classes =  {\n   saveable: this.canSave,      // true\n   modified: !this.isUnchanged, // false\n   special: this.isSpecial,     // true\n };\n return classes;\n}\n&lt;div [ngClass]=&quot;{cssClass: setClass()}&quot;&gt;&lt;/div&gt;</code></pre></div>\n</li>\n</ol>\n</li>\n<li>\n<p>Style[]</p>\n<ol>\n<li>标签\n<code class=\"language-text\">style property</code></li>\n<li>语法:<code class=\"language-text\">style.value</code></li>\n<li>\n<p>DEMO</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;button [style.color] = &quot;isSpecial ? &#39;red&#39; : &#39;green&#39;&quot;&gt;</code></pre></div>\n</li>\n<li>\n<p>NgStyle 代替</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">setStyles() {\n let styles = {\n   // CSS property names\n  &#39;font-style&#39;:  this.canSave      ? &#39;italic&#39; : &#39;normal&#39;,  // italic\n   &#39;font-weight&#39;: !this.isUnchanged ? &#39;bold&#39;   : &#39;normal&#39;,  // normal\n   &#39;font-size&#39;:   this.isSpecial    ? &#39;24px&#39;   : &#39;8px&#39;,     // 24px\n };\n return styles;\n}\n&lt;div [ngStyle]=&quot;{style: setStyles()}&quot;&gt;\n This div is italic, normal weight, and extra large (24px).\n&lt;/div&gt;</code></pre></div>\n</li>\n</ol>\n</li>\n<li>\n<p>template</p>\n<ol>\n<li>\n<p>引用变量#</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;!-- phone refers to the input element; pass its `value` to an event handler --&gt;\n&lt;input #phone placeholder=&quot;phone number&quot;&gt;\n&lt;button (click)=&quot;callPhone(phone.value)&quot;&gt;Call&lt;/button&gt;\n&lt;!-- fax refers to the input element; pass its `value` to an event handler --&gt;\n&lt;input ref-fax placeholder=&quot;fax number&quot;&gt;\n&lt;button (click)=&quot;callFax(fax.value)&quot;&gt;Fax&lt;/button&gt;</code></pre></div>\n</li>\n<li>\n<p>form 表单【theForm 变量可以用来校验表单的值<code class=\"language-text\">theForm.form.valid</code>】</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;form (ngSubmit)=&quot;onSubmit(theForm)&quot; #theForm=&quot;ngForm&quot;&gt;\n &lt;div class=&quot;form-group&quot;&gt;\n   &lt;label for=&quot;name&quot;&gt;Name&lt;/label&gt;\n   &lt;input class=&quot;form-control&quot; required ngControl=&quot;firstName&quot;\n     [(ngModel)]=&quot;currentHero.firstName&quot;&gt;\n &lt;/div&gt;\n &lt;button type=&quot;submit&quot; [disabled]=&quot;!theForm.form.valid&quot;&gt;Submit&lt;/button&gt;\n&lt;/form&gt;</code></pre></div>\n</li>\n<li>定义 input 和 output 属性\n<code class=\"language-text\">@Input(),@Output()</code>:单个属性;\n<code class=\"language-text\">inputs,outputs</code>: 多个属性</li>\n<li>操作符</li>\n<li>\n<p>|:以|后面的形式输出</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;!-- Pipe chaining: convert title to uppercase, then to lowercase --&gt;\n&lt;div&gt;\n Title through a pipe chain:\n {{title | uppercase | lowercase}}\n&lt;/div&gt;\n&lt;!-- 以JSON格式输出--&gt;\n&lt;div&gt;{{currentHero | json}}&lt;/div&gt;</code></pre></div>\n</li>\n<li>\n<p>?.: 防止变量或对象为 null 时,输出异常</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">The current hero&#39;s name is {{currentHero?.firstName}}</code></pre></div>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>数据绑定【<strong>只能在 properties 和 events 中使用</strong>】:</p>\n<ul>\n<li><code class=\"language-text\">{{value}}</code>: 绑定页面的值,JS 变量值的绑定</li>\n<li><code class=\"language-text\">[property]=value</code>: 绑定属性或对象的值,大多数用在自定义组件中。<br>例如：<code class=\"language-text\">&lt;div [hidden]=&quot;!submitted&quot;&gt;</code></li>\n<li><code class=\"language-text\">(event) = &quot;handler&quot;</code>:绑定事件,主要对应函数</li>\n<li><code class=\"language-text\">[(ngModel)] = &quot;property&quot;</code>: 双向绑定。<code class=\"language-text\">[ngModel]</code>:设置值;<code class=\"language-text\">(ngModelChange)</code>:修改值触发。</li>\n<li><code class=\"language-text\">ngSubmit</code>: form 表单提交</li>\n<li><code class=\"language-text\">#heroForm</code>: 表示模板中引用的变量</li>\n<li><code class=\"language-text\">ngControlName</code>： 认证和表单元素跟踪</li>\n<li><code class=\"language-text\">valid</code>属性：用于判断 input 输入控件是否认证来显示或隐藏错误提示信息</li>\n<li>总结【其中<code class=\"language-text\">[],()</code>与<code class=\"language-text\">bind-,on-bindon-</code>效果一致】</li>\n<li>\n<p>数据到视图</p>\n<ol>\n<li>\n<p>语法</p>\n<div class=\"gatsby-highlight\" data-language=\"angular\"><pre class=\"language-angular\"><code class=\"language-angular\">{{ expression }} [target]=&quot;expression&quot; bind-target=&quot;expression&quot;</code></pre></div>\n</li>\n<li>\n<p>绑定类型</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Interpolation\nProperty\nAttribute\nClass\nStype</code></pre></div>\n</li>\n</ol>\n</li>\n<li>\n<p>视图到数据绑定</p>\n<ol>\n<li>\n<p>语法</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(target)=&quot;statement&quot;\non-target=&quot;statement&quot;</code></pre></div>\n</li>\n<li>绑定类型\n<code class=\"language-text\">event</code></li>\n</ol>\n</li>\n<li>\n<p>双向绑定</p>\n<ol>\n<li>\n<p>语法</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[(target)] = &quot;expression&quot;\nbind-target=&quot;expression&quot;</code></pre></div>\n</li>\n<li>绑定类型:双向绑定</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>事件定义: <code class=\"language-text\">$event</code>【用于绑定所有事件变量】,DOM 元素的 event 事件;</p>\n<ul>\n<li><code class=\"language-text\">$event.target.value</code>: 获取 HTML 元素的 value</li>\n<li><code class=\"language-text\">(keyup.enter)=&quot;values=box.value&quot;</code>:过滤 enter 键</li>\n<li><code class=\"language-text\">(ngModelChange) = &quot;model.name = $event&quot;</code></li>\n<li><code class=\"language-text\">$event.target</code>: 获取 HTML 元素</li>\n<li><code class=\"language-text\">自定义事件</code>:EventEmitter。事件触发:<code class=\"language-text\">EventEmitter.emit()</code></li>\n</ul>\n</li>\n<li>依赖注入</li>\n<li>Angular2 的依赖注入是在 main.ts 的<code class=\"language-text\">bootstrap(AppComponent);</code>中注入的</li>\n<li><strong>providers</strong>：出现在@Component 的 providers: [HeroService]，为当前类注入 HeroService 类，在 directives 中的类都可以使用已注入的服务类。</li>\n<li>依赖隐含创建：</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">injector = ReflectiveInjector.resolveAndCreate([Car, Engine, Tires]);\nlet car = injector.get(Car);</code></pre></div>\n<ul>\n<li>建议在每个 service 类中都使用<strong>@Injectable()</strong></li>\n<li><code class=\"language-text\">providers: [Logger]</code>=><code class=\"language-text\">{[provide:Logger,useClass:Logger]}</code>.</li>\n<li><code class=\"language-text\">@Optional</code>: 可选择的。例如:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    constructor(@Optional() private logger: Logger) {\n      if (this.logger) {\n        this.logger.log(some_message);\n      }\n    }</code></pre></div>\n<p>在 logger 不需要注入时,需要添加 null 值</p>\n<h3 id=\"part3\"><a href=\"#part3\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>part3</h3>\n<ol>\n<li>将详情页以组件的形式展现<br/></li>\n<li><strong>@Input</strong>:用于页面和 JS 文件的对象绑定</li>\n</ol>\n<h3 id=\"part4\"><a href=\"#part4\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>part4</h3>\n<ol>\n<li>ngOnInit 在 AppComponent 启动时调用</li>\n<li><strong>provider</strong> 在 AppComponent 调用 Service 服务时需要在 provider 中定义;</li>\n<li>利用 Promise.resolve 处理异步请求,并用.then 方法处理异步回调结果;</li>\n</ol>\n<h3 id=\"part5\"><a href=\"#part5\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>part5</h3>\n<ol>\n<li>routerLink:按 routerConfig 中的名字匹配;</li>\n<li>router.navigate([‘routerConfig 中的 name’, {id: this.selectedHero.id}]);</li>\n<li>配置带参数的 config</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    {\n       path: &#39;/detail/:id&#39;,\n       name: &#39;HeroDetail&#39;,\n       component: HeroDetailComponent\n    }</code></pre></div>\n<ol start=\"4\">\n<li>\n<p>html 标记语言(如碰到<template></template>这种标记,需要将星号的标签将”*“去掉)</p>\n<blockquote>\n<p><code class=\"language-text\">(click)</code>:点击事件;<br>\n<code class=\"language-text\">&lt;input [(ngModel)]=&quot;hero.name&quot; placeholder=&quot;name&quot;/&gt;</code>: 为文本赋值并绑定<br></p>\n</blockquote>\n</li>\n<li><em>*ngIf</em>: 条件语句隐藏对应的 DOM 元素;在<strong>template</strong>中需要将*去掉,例如:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    &lt;template [ngIf]=&quot;currentHero&quot;&gt;\n      &lt;hero-detail [hero]=&quot;currentHero&quot;&gt;&lt;/hero-detail&gt;\n    &lt;/template&gt;</code></pre></div>\n<ul>\n<li>\n<p><em>*ngFor</em></p>\n<ul>\n<li>绑定循环索引 i(初始化为 0)<code class=\"language-text\">&lt;li *ngFor=&quot;let hero of heroes;let i=index&quot;&gt;{{i+1}}-{{hero-name}}&lt;/li&gt;</code></li>\n<li>\n<p>防止 DOM 修改元素</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">trackByHeroes(index: number, hero: Hero) { return hero.id; }\n&lt;div *ngFor=&quot;let hero of heroes; trackBy:trackByHeroes&quot;&gt;({{hero.id}}) {{hero.fullName}}&lt;/div&gt;\n&lt;div *ngFor=&quot;let hero of heroes&quot; *ngForTrackBy=&quot;trackByHeroes&quot;&gt;({{hero.id}}) {{hero.fullName}}&lt;/div&gt;</code></pre></div>\n</li>\n</ul>\n</li>\n<li><em>ngSwitch</em>: 类似于 java 的 switch</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    &lt;span [ngSwitch]=&quot;toeChoice&quot;&gt;\n      &lt;span *ngSwitchWhen=&quot;&#39;Eenie&#39;&quot;&gt;Eenie&lt;/span&gt;\n      &lt;span *ngSwitchWhen=&quot;&#39;Meanie&#39;&quot;&gt;Meanie&lt;/span&gt;\n      &lt;span *ngSwitchWhen=&quot;&#39;Miney&#39;&quot;&gt;Miney&lt;/span&gt;\n      &lt;span *ngSwitchWhen=&quot;&#39;Moe&#39;&quot;&gt;Moe&lt;/span&gt;\n      &lt;span *ngSwitchDefault&gt;other&lt;/span&gt;\n    &lt;/span&gt;</code></pre></div>\n<ol start=\"5\">\n<li>使用 Router 步骤:<br>1. <code class=\"language-text\">import Router</code>;\n<br>2.定义构造器\n<br><code class=\"language-text\">constructor(private router: Router,private heroService: HeroService) { }</code>\n<br><code class=\"language-text\">this.router.navigate([&#39;HeroDetail&#39;, { id: this.selectedHero.id }]);</code>: 带参数跳转</li>\n</ol>\n<h3 id=\"part6\"><a href=\"#part6\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>part6</h3>\n<ol>\n<li>\n<p>Http Promise</p>\n<blockquote>\n<p>http.get</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heroesUrl<span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">.</span><span class=\"token function\">toPromise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>http.get 返回 RxJS Observable 对象。</li>\n<li><strong>Observables</strong>用于存储异步数据流。</li>\n<li>将 Observable 对象转换为 Promise 对象,需要引入<code class=\"language-text\">&#39;rxjs/add/operator/toPromise&#39;</code></li>\n<li>取出值:<code class=\"language-text\">.then(response =&gt; response.json().data)</code></li>\n<li>异步错误处理: <code class=\"language-text\">this.handleError</code>。</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">private</span> <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'An error occurred'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 以友好的方式返回</span>\n      <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message <span class=\"token operator\">||</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; http POST\n\n```\n    this.http\n             .post(this.heroesUrl, JSON.stringify(hero), {headers: headers})\n             .toPromise()\n             .then(res =&gt; res.json().data)\n             .catch(this.handleError);\n```</code></pre></div>\n<ul>\n<li>\n<p>设置 header 格式</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  let headers = new Headers({\n                &#39;Content-Type&#39;: &#39;application/json&#39;});</code></pre></div>\n</li>\n<li>将对象转化为字符串:<code class=\"language-text\">JSON.stringify</code></li>\n</ul>\n<h2 id=\"attribute-directive\"><a href=\"#attribute-directive\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Attribute Directive</h2>\n<h3 id=\"elementref\"><a href=\"#elementref\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ElementRef</h3>\n<p>定义构造函数，注入 ElementRef,这样可以访问 DOM element。</p>\n<div class=\"gatsby-highlight\" data-language=\"angular2\"><pre class=\"language-angular2\"><code class=\"language-angular2\">  constructor(el: ElementRef){\n    el.nativeElement.style.backgroundColor = &#39;yellow&#39;;\n  }</code></pre></div>\n<h3 id=\"hostlistener\"><a href=\"#hostlistener\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@HostListener</h3>\n<p>用于监听 DOM element 的事件</p>\n<div class=\"gatsby-highlight\" data-language=\"angular2\"><pre class=\"language-angular2\"><code class=\"language-angular2\">// 鼠标进入时触发\n@HostListener(&#39;mouseenter&#39;) onMouseEnter() {\n  this.highLight(&#39;yellow&#39;);\n}\n// 鼠标离开时触发\n@HostListener(&#39;mouseleave&#39;) onMouseLeave() {\n  this.highLight(&#39;blue&#39;);\n}</code></pre></div>\n<h3 id=\"input\"><a href=\"#input\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@Input</h3>\n<p>将前后台的变量传值进行动态绑定</p>\n<div class=\"gatsby-highlight\" data-language=\"angular2\"><pre class=\"language-angular2\"><code class=\"language-angular2\">    // 后台绑定\n    @Input() set defaultColor(colorName:string) {\n        this._defaultColor = colorName || this._defaultColor;\n    }\n\n    // 对应前台输入的color值\n    @Input(&#39;myHighlight&#39;) highlightColor:string;</code></pre></div>\n<p>前台使用:</p>\n<ol>\n<li>‘color’在<code class=\"language-text\">[myHighlight]=&quot;color&quot;</code>是绑定的数据源</li>\n<li>‘myHighlight’在<code class=\"language-text\">[myHighlight]=&quot;color&quot;</code>是绑定的标签【必须】</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">[myHighlight]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>color<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">[defaultColor]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>violet<span class=\"token punctuation\">'</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Highlight me!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>","timeToRead":9,"frontmatter":{"title":"angular2学习","date":"October 21, 2020","spoiler":"learn angular2."},"fields":{"slug":"/learn-angular/"}}},"pageContext":{"slug":"/learn-angular/","previous":{"fields":{"slug":"/flink-knowledge/","directoryName":"flink-knowledge"},"frontmatter":{"title":"flink笔记（1）"}},"next":{"fields":{"slug":"/thread-safe/","directoryName":"thread-safe"},"frontmatter":{"title":"线程安全性"}}}},"staticQueryHashes":["336482444"]}