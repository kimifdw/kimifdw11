{"componentChunkName":"component---src-templates-blog-post-js","path":"/designModel/","result":{"data":{"site":{"siteMetadata":{"title":"FDW-blog","author":"kimifdw"}},"markdownRemark":{"id":"7cc14ce0-f7d4-54e7-a277-37ebe89ee847","html":"<h2 id=\"依赖倒置原则\"><a href=\"#%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>依赖倒置原则</h2>\n<ul>\n<li>\n<p>定义。</p>\n<ol>\n<li>高层模块不应依赖于低层模块，二者应依赖于抽象。模块间的依赖是通过抽象发生，实现类之间<strong>不发生</strong>直接的依赖关系，其依赖关系是通过接口或抽象类产生的。</li>\n<li>抽象不应依赖于细节，细节应依赖于抽象。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"状态模式\"><a href=\"#%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>状态模式</h2>\n<ul>\n<li>定义。通过内部不同的状态选择具体的算法。</li>\n<li>\n<p>使用场景。内部存在多种状态；不同的状态的业务逻辑各不相同。</p>\n<ol>\n<li>短信接口。</li>\n<li>限流。</li>\n</ol>\n</li>\n<li>\n<p>核心代码。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n<span class=\"token comment\">// stateManagerInstance 当前使用的服务提供商实例</span>\n<span class=\"token comment\">// 默认aliyun</span>\nstateManagerInstance <span class=\"token operator\">*</span>StateManager\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// StateManager 状态管理</span>\n<span class=\"token keyword\">type</span> StateManager <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// CurrentProviderType 当前使用的服务提供商类型</span>\n<span class=\"token comment\">// 默认aliyun</span>\ncurrentProviderType ProviderType\n\n<span class=\"token comment\">// CurrentProvider 当前使用的服务提供商实例</span>\n<span class=\"token comment\">// 默认aliyun</span>\ncurrentProvider SmsServiceInterface\n\n<span class=\"token comment\">// 更新状态时间间隔</span>\nsetStateDuration time<span class=\"token punctuation\">.</span>Duration\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// initState 初始化状态</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>StateManager<span class=\"token punctuation\">)</span> <span class=\"token function\">initState</span><span class=\"token punctuation\">(</span>duration time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 初始化</span>\nm<span class=\"token punctuation\">.</span>setStateDuration <span class=\"token operator\">=</span> duration\nm<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 定时器更新状态</span>\n<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 每一段时间后根据回调的发送成功率 计算得到当前应该使用的 厂商</span>\n\t\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> t <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">NewTicker</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>setStateDuration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>C<span class=\"token punctuation\">:</span>\n\t\t\tm<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// setState 设置状态</span>\n<span class=\"token comment\">// 根据短信云商回调的短信发送成功率 得到下阶段发送短信使用哪个厂商的服务</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>StateManager<span class=\"token punctuation\">)</span> <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>t time<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 这里用随机模拟</span>\nProviderTypeArray <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>ProviderType<span class=\"token punctuation\">{</span>\n\tProviderTypeAliyun<span class=\"token punctuation\">,</span>\n\tProviderTypeTencent<span class=\"token punctuation\">,</span>\n\tProviderTypeYunpian<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\nm<span class=\"token punctuation\">.</span>currentProviderType <span class=\"token operator\">=</span> ProviderTypeArray<span class=\"token punctuation\">[</span>rand<span class=\"token punctuation\">.</span><span class=\"token function\">Intn</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>ProviderTypeArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">switch</span> m<span class=\"token punctuation\">.</span>currentProviderType <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">case</span> ProviderTypeAliyun<span class=\"token punctuation\">:</span>\n\tm<span class=\"token punctuation\">.</span>currentProvider <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>ServiceProviderAliyun<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">case</span> ProviderTypeTencent<span class=\"token punctuation\">:</span>\n\tm<span class=\"token punctuation\">.</span>currentProvider <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>ServiceProviderTencent<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">case</span> ProviderTypeYunpian<span class=\"token punctuation\">:</span>\n\tm<span class=\"token punctuation\">.</span>currentProvider <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>ServiceProviderYunpian<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"无效的短信服务商\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"时间：%s| 变更短信发送厂商为: %s \\n\"</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2006-01-02 15:04:05\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">.</span>currentProviderType<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// getState 获取当前状态</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>StateManager<span class=\"token punctuation\">)</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> SmsServiceInterface <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> m<span class=\"token punctuation\">.</span>currentProvider\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// GetState 获取当前状态</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">GetState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> SmsServiceInterface <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> stateManagerInstance<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"适配器模式\"><a href=\"#%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>适配器模式</h2>\n<ul>\n<li>定义。将不兼容的接口转换为可兼容的接口，让原本由于接口不兼容而不能一起工作的类可以一起工作。</li>\n<li>使用场景。接口不兼容的情况。</li>\n</ul>\n<h2 id=\"组合模式\"><a href=\"#%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>组合模式</h2>\n<ul>\n<li>使用场景。存在类似于树的层级结构，有明显的上下游关系。</li>\n<li>\n<p>核心代码</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Context 上下文</span>\n<span class=\"token keyword\">type</span> Context <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Component 组件</span>\n<span class=\"token keyword\">type</span> Component <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 添加一个子组件</span>\n<span class=\"token function\">Mount</span><span class=\"token punctuation\">(</span>c Component<span class=\"token punctuation\">,</span> components <span class=\"token operator\">...</span>Component<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n<span class=\"token comment\">// 移除一个子组件</span>\n<span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>c Component<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n<span class=\"token comment\">// 执行组件&amp;子组件</span>\n<span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">*</span>Context<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// BaseComponent 基础组件</span>\n<span class=\"token comment\">// 实现Add:添加一个子组件</span>\n<span class=\"token comment\">// 实现Remove:移除一个子组件</span>\n<span class=\"token keyword\">type</span> BaseComponent <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 子组件列表</span>\nChildComponents <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Component\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Mount 挂载一个子组件</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>bc <span class=\"token operator\">*</span>BaseComponent<span class=\"token punctuation\">)</span> <span class=\"token function\">Mount</span><span class=\"token punctuation\">(</span>c Component<span class=\"token punctuation\">,</span> components <span class=\"token operator\">...</span>Component<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\nfuncName <span class=\"token operator\">:=</span> <span class=\"token function\">runFuncName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 子组件是否已在列表中</span>\n<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> component <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> components <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> component <span class=\"token operator\">==</span> c <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>funcName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"已挂在\"</span><span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">TypeOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已挂在\"</span> <span class=\"token operator\">+</span> funcName<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> childComponent <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> bc<span class=\"token punctuation\">.</span>ChildComponents <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> childComponent <span class=\"token operator\">==</span> c <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>funcName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"已挂在\"</span><span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">TypeOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已挂在\"</span> <span class=\"token operator\">+</span> funcName<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> component <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> components <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> childComponent <span class=\"token operator\">==</span> component <span class=\"token punctuation\">{</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>funcName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"已挂在\"</span><span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">TypeOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已挂在\"</span> <span class=\"token operator\">+</span> funcName<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nbc<span class=\"token punctuation\">.</span>ChildComponents <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>bc<span class=\"token punctuation\">.</span>ChildComponents<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>components<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span>\nbc<span class=\"token punctuation\">.</span>ChildComponents <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>bc<span class=\"token punctuation\">.</span>ChildComponents<span class=\"token punctuation\">,</span> components<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Remove 移除一个子组件</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>bc <span class=\"token operator\">*</span>BaseComponent<span class=\"token punctuation\">)</span> <span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>c Component<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>bc<span class=\"token punctuation\">.</span>ChildComponents<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> childComponent <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> bc<span class=\"token punctuation\">.</span>ChildComponents <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> c <span class=\"token operator\">==</span> childComponent <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">runFuncName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"移除:\"</span><span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">TypeOf</span><span class=\"token punctuation\">(</span>childComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\tbc<span class=\"token punctuation\">.</span>ChildComponents <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>bc<span class=\"token punctuation\">.</span>ChildComponents<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> bc<span class=\"token punctuation\">.</span>ChildComponents<span class=\"token punctuation\">[</span>k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Do 执行组件&amp;子组件</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>bc <span class=\"token operator\">*</span>BaseComponent<span class=\"token punctuation\">)</span> <span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">*</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// do nothing</span>\n<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ChildsDo 执行子组件</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>bc <span class=\"token operator\">*</span>BaseComponent<span class=\"token punctuation\">)</span> <span class=\"token function\">ChildsDo</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">*</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 执行子组件</span>\n<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> childComponent <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> bc<span class=\"token punctuation\">.</span>ChildComponents <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">=</span> childComponent<span class=\"token punctuation\">.</span><span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> err\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"责任链模式\"><a href=\"#%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>责任链模式</h2>\n<ul>\n<li>使用场景。以链表的方式，存在明显的链式逻辑。</li>\n<li>\n<p>核心代码</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Context Context</span>\n<span class=\"token keyword\">type</span> Context <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Handler 处理</span>\n<span class=\"token keyword\">type</span> Handler <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 自身的业务</span>\n<span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Context<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n<span class=\"token comment\">// 设置下一个对象</span>\n<span class=\"token function\">SetNext</span><span class=\"token punctuation\">(</span>h Handler<span class=\"token punctuation\">)</span> Handler\n<span class=\"token comment\">// 执行</span>\n<span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Context<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Next 抽象出来的 可被合成复用的结构体</span>\n<span class=\"token keyword\">type</span> Next <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 下一个对象</span>\nnextHandler Handler\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// SetNext 实现好的 可被复用的SetNext方法</span>\n<span class=\"token comment\">// 返回值是下一个对象 方便写成链式代码优雅</span>\n<span class=\"token comment\">// 例如 nullHandler.SetNext(argumentsHandler).SetNext(signHandler).SetNext(frequentHandler)</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span>Next<span class=\"token punctuation\">)</span> <span class=\"token function\">SetNext</span><span class=\"token punctuation\">(</span>h Handler<span class=\"token punctuation\">)</span> Handler <span class=\"token punctuation\">{</span>\nn<span class=\"token punctuation\">.</span>nextHandler <span class=\"token operator\">=</span> h\n<span class=\"token keyword\">return</span> h\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Run 执行</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span>Next<span class=\"token punctuation\">)</span> <span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 由于go无继承的概念 这里无法执行当前handler的Do</span>\n<span class=\"token comment\">// n.Do(c)</span>\n<span class=\"token keyword\">if</span> n<span class=\"token punctuation\">.</span>nextHandler <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 合成复用下的变种</span>\n\t<span class=\"token comment\">// 执行下一个handler的Do</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>nextHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// 执行下一个handler的Run</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>nextHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// NullHandler 空Handler</span>\n<span class=\"token comment\">// 由于go无继承的概念 作为链式调用的第一个载体 设置实际的下一个对象</span>\n<span class=\"token keyword\">type</span> NullHandler <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 合成复用Next的`nextHandler`成员属性、`SetNext`成员方法、`Run`成员方法</span>\nNext\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Do 空Handler的Do</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">*</span>NullHandler<span class=\"token punctuation\">)</span> <span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 空Handler 这里什么也不做 只是载体 do nothing...</span>\n<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>","timeToRead":5,"frontmatter":{"title":"设计模式","date":"November 14, 2020","spoiler":"设计模式"},"fields":{"slug":"/designModel/"}}},"pageContext":{"slug":"/designModel/","previous":{"fields":{"slug":"/red-black-tree/","directoryName":"red-black-tree"},"frontmatter":{"title":"红黑树"}},"next":{"fields":{"slug":"/jvm/","directoryName":"jvm"},"frontmatter":{"title":"jvm cms"}}}},"staticQueryHashes":["336482444"]}