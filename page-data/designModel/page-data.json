{"componentChunkName":"component---src-templates-blog-post-js","path":"/designModel/","result":{"data":{"site":{"siteMetadata":{"title":"FDW-blog","author":"kimifdw"}},"markdownRemark":{"id":"7cc14ce0-f7d4-54e7-a277-37ebe89ee847","html":"<h2 id=\"组合模式\"><a href=\"#%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>组合模式</h2>\n<ul>\n<li>使用场景。存在类似于树的层级结构，有明显的上下游关系。</li>\n<li>\n<p>核心代码</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Context 上下文</span>\n<span class=\"token keyword\">type</span> Context <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Component 组件</span>\n<span class=\"token keyword\">type</span> Component <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 添加一个子组件</span>\n<span class=\"token function\">Mount</span><span class=\"token punctuation\">(</span>c Component<span class=\"token punctuation\">,</span> components <span class=\"token operator\">...</span>Component<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n<span class=\"token comment\">// 移除一个子组件</span>\n<span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>c Component<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n<span class=\"token comment\">// 执行组件&amp;子组件</span>\n<span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">*</span>Context<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// BaseComponent 基础组件</span>\n<span class=\"token comment\">// 实现Add:添加一个子组件</span>\n<span class=\"token comment\">// 实现Remove:移除一个子组件</span>\n<span class=\"token keyword\">type</span> BaseComponent <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 子组件列表</span>\nChildComponents <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Component\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Mount 挂载一个子组件</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>bc <span class=\"token operator\">*</span>BaseComponent<span class=\"token punctuation\">)</span> <span class=\"token function\">Mount</span><span class=\"token punctuation\">(</span>c Component<span class=\"token punctuation\">,</span> components <span class=\"token operator\">...</span>Component<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\nfuncName <span class=\"token operator\">:=</span> <span class=\"token function\">runFuncName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 子组件是否已在列表中</span>\n<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> component <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> components <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> component <span class=\"token operator\">==</span> c <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>funcName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"已挂在\"</span><span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">TypeOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已挂在\"</span> <span class=\"token operator\">+</span> funcName<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> childComponent <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> bc<span class=\"token punctuation\">.</span>ChildComponents <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> childComponent <span class=\"token operator\">==</span> c <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>funcName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"已挂在\"</span><span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">TypeOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已挂在\"</span> <span class=\"token operator\">+</span> funcName<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> component <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> components <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> childComponent <span class=\"token operator\">==</span> component <span class=\"token punctuation\">{</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>funcName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"已挂在\"</span><span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">TypeOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已挂在\"</span> <span class=\"token operator\">+</span> funcName<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nbc<span class=\"token punctuation\">.</span>ChildComponents <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>bc<span class=\"token punctuation\">.</span>ChildComponents<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>components<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span>\nbc<span class=\"token punctuation\">.</span>ChildComponents <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>bc<span class=\"token punctuation\">.</span>ChildComponents<span class=\"token punctuation\">,</span> components<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Remove 移除一个子组件</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>bc <span class=\"token operator\">*</span>BaseComponent<span class=\"token punctuation\">)</span> <span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>c Component<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>bc<span class=\"token punctuation\">.</span>ChildComponents<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> childComponent <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> bc<span class=\"token punctuation\">.</span>ChildComponents <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> c <span class=\"token operator\">==</span> childComponent <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">runFuncName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"移除:\"</span><span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">TypeOf</span><span class=\"token punctuation\">(</span>childComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\tbc<span class=\"token punctuation\">.</span>ChildComponents <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>bc<span class=\"token punctuation\">.</span>ChildComponents<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> bc<span class=\"token punctuation\">.</span>ChildComponents<span class=\"token punctuation\">[</span>k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Do 执行组件&amp;子组件</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>bc <span class=\"token operator\">*</span>BaseComponent<span class=\"token punctuation\">)</span> <span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">*</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// do nothing</span>\n<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ChildsDo 执行子组件</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>bc <span class=\"token operator\">*</span>BaseComponent<span class=\"token punctuation\">)</span> <span class=\"token function\">ChildsDo</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">*</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 执行子组件</span>\n<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> childComponent <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> bc<span class=\"token punctuation\">.</span>ChildComponents <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">=</span> childComponent<span class=\"token punctuation\">.</span><span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> err\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"责任链模式\"><a href=\"#%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>责任链模式</h2>\n<ul>\n<li>使用场景。以链表的方式，存在明显的链式逻辑。</li>\n<li>\n<p>核心代码</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Context Context</span>\n<span class=\"token keyword\">type</span> Context <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Handler 处理</span>\n<span class=\"token keyword\">type</span> Handler <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 自身的业务</span>\n<span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Context<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n<span class=\"token comment\">// 设置下一个对象</span>\n<span class=\"token function\">SetNext</span><span class=\"token punctuation\">(</span>h Handler<span class=\"token punctuation\">)</span> Handler\n<span class=\"token comment\">// 执行</span>\n<span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Context<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Next 抽象出来的 可被合成复用的结构体</span>\n<span class=\"token keyword\">type</span> Next <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 下一个对象</span>\nnextHandler Handler\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// SetNext 实现好的 可被复用的SetNext方法</span>\n<span class=\"token comment\">// 返回值是下一个对象 方便写成链式代码优雅</span>\n<span class=\"token comment\">// 例如 nullHandler.SetNext(argumentsHandler).SetNext(signHandler).SetNext(frequentHandler)</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span>Next<span class=\"token punctuation\">)</span> <span class=\"token function\">SetNext</span><span class=\"token punctuation\">(</span>h Handler<span class=\"token punctuation\">)</span> Handler <span class=\"token punctuation\">{</span>\nn<span class=\"token punctuation\">.</span>nextHandler <span class=\"token operator\">=</span> h\n<span class=\"token keyword\">return</span> h\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Run 执行</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span>Next<span class=\"token punctuation\">)</span> <span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 由于go无继承的概念 这里无法执行当前handler的Do</span>\n<span class=\"token comment\">// n.Do(c)</span>\n<span class=\"token keyword\">if</span> n<span class=\"token punctuation\">.</span>nextHandler <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 合成复用下的变种</span>\n\t<span class=\"token comment\">// 执行下一个handler的Do</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>nextHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// 执行下一个handler的Run</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>nextHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// NullHandler 空Handler</span>\n<span class=\"token comment\">// 由于go无继承的概念 作为链式调用的第一个载体 设置实际的下一个对象</span>\n<span class=\"token keyword\">type</span> NullHandler <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 合成复用Next的`nextHandler`成员属性、`SetNext`成员方法、`Run`成员方法</span>\nNext\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Do 空Handler的Do</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">*</span>NullHandler<span class=\"token punctuation\">)</span> <span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 空Handler 这里什么也不做 只是载体 do nothing...</span>\n<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>","timeToRead":2,"frontmatter":{"title":"设计模式","date":"November 12, 2020","spoiler":"设计模式"},"fields":{"slug":"/designModel/"}}},"pageContext":{"slug":"/designModel/","previous":{"fields":{"slug":"/netty-server/","directoryName":"netty-server"},"frontmatter":{"title":"netty server"}},"next":null}},"staticQueryHashes":["336482444"]}