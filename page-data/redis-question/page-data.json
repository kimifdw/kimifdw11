{"componentChunkName":"component---src-templates-blog-post-js","path":"/redis-question/","result":{"data":{"site":{"siteMetadata":{"title":"F&Y-BLOG","author":"kimifdw"}},"markdownRemark":{"id":"131debb2-419f-51bf-8705-306c1b41529e","html":"<h1 id=\"缓存问题（redis）\"><a href=\"#%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98%EF%BC%88redis%EF%BC%89\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>缓存问题（Redis）</h1>\n<h2 id=\"缓存踩踏\"><a href=\"#%E7%BC%93%E5%AD%98%E8%B8%A9%E8%B8%8F\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>缓存踩踏</h2>\n<h3 id=\"定义\"><a href=\"#%E5%AE%9A%E4%B9%89\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>定义</h3>\n<p>多个线程试图并行访问缓存，如缓存的值不存在，则线程将同时尝试从数据源获取数据</p>\n<h3 id=\"核心问题\"><a href=\"#%E6%A0%B8%E5%BF%83%E9%97%AE%E9%A2%98\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>核心问题</h3>\n<p>竞态条件——多个线程争夺共享资源</p>\n<h3 id=\"解决方案\"><a href=\"#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解决方案</h3>\n<ol>\n<li>增加更多的缓存</li>\n<li>使用缓存异步 Promise 的模式来处理缓存</li>\n<li>\n<p>预先重计算【不推荐】。在缓存键正式过期前，重新计算缓存值并延长过期时间</p>\n<ul>\n<li>概率性预先重计算。<code class=\"language-text\">currentTime-(timeToCompute*beta*log(rand())) &gt; expiry</code>。每当线程从缓存中获取数据时，都会执行这个算法。如果返回 true，那么该线程将重新计算这个缓存值。离过期时间越近，这个算法返回 true 的几率就会显著增加</li>\n<li>currentTime 是当前时间戳。</li>\n<li>timeToCompute 是重新计算缓存值所花费的时间。</li>\n<li>beta 是一个大于 0 的非负数，默认值为 1，是可配置的。</li>\n<li>rand()是一个返回 0 到 1 之间随机数的函数。</li>\n<li>expiry 是缓存值未来被设置为过期的时间戳。</li>\n</ul>\n</li>\n<li>\n<p>回路断路器</p>\n<ul>\n<li>将一个受保护的函数调用封装在一个断路器对象中，断路器对象负责监控故障，一旦故障达到某一阈值，断路器就跳闸，所有对断路器的进一步调用都返回错误，根本调用不到受保护的函数。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"资料\"><a href=\"#%E8%B5%84%E6%96%99\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>资料</h3>\n<ol>\n<li><a href=\"https://www.infoq.cn/article/Bb2YC0yHVSz4qVwdgZmO\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">缓存踩踏：Facebook 史上最严重的宕机事件分析</a></li>\n<li><a href=\"https://cseweb.ucsd.edu/~avattani/papers/cache_stampede.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">概率性预先重计算论文</a></li>\n</ol>","timeToRead":2,"frontmatter":{"title":"redis 问题","date":"March 25, 2021","spoiler":"redis question"},"fields":{"slug":"/redis-question/"}}},"pageContext":{"slug":"/redis-question/","previous":{"fields":{"slug":"/java-concurrent-lock/","directoryName":"java-concurrent-lock"},"frontmatter":{"title":"java concurrent locks"}},"next":null}},"staticQueryHashes":["336482444"]}